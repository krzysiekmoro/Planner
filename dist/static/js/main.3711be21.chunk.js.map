{"version":3,"sources":["App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["Dashboard","lazy","ProjectDetails","SignIn","SignUp","CreateProject","Navbar","AuthIsLoaded","children","auth","useSelector","state","firebase","isLoaded","App","fallback","exact","path","component","Boolean","window","location","hostname","match","initState","authError","authReducer","action","type","console","log","err","message","projects","id","title","content","projectReducer","project","rootReducer","combineReducers","firestore","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","middleware","thunk","withExtraArgument","getFirebase","getFirestore","store","createStore","compose","applyMiddleware","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","dispatch","createFirestoreInstance","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3711be21.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { isLoaded } from 'react-redux-firebase';\n\nconst Dashboard = lazy(() => import('./components/dashboard/Dashboard'));\nconst ProjectDetails = lazy(() => import('./components/projects/ProjectDetails'));\nconst SignIn = lazy(() => import('./components/auth/SignIn'));\nconst SignUp = lazy(() => import('./components/auth/SignUp'));\nconst CreateProject = lazy(() => import('./components/projects/CreateProject'))\nconst Navbar = lazy(() => import('./components/layout/Navbar'));\n\n\n\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector(state => state.firebase.auth)\n  if (!isLoaded(auth)) return <div>Loading screen...</div>;\n  return children\n}\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <AuthIsLoaded>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/project/:id' component={ProjectDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateProject} />\n          </Switch>\n        </Suspense>\n      </AuthIsLoaded>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n    switch(action.type){\n        case 'LOGIN_ERROR':\n            console.log('Login failed')\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n        case 'LOGIN_SUCCESS':\n            console.log('Login success')\n            return{\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            console.log('Sing out success')\n            return state;\n        case 'SIGNUP_SUCCESS':\n            console.log('Sign up success')\n            return{\n                ...state,\n                authError: null\n            }\n        case 'SIGNUP_ERROR':\n            console.log('Sign up error');\n            return{\n                ...state,\n                authError: action.err.message\n            }\n        default:\n            return state;\n    }\n}\n\nexport default authReducer;","const initState = {\n    projects: [\n        {id: '1', title: 'help me find peach', content: 'blah blah blah'},\n        {id: '2', title: 'collect all the stars', content: 'blah blah blah'},\n        {id: '3', title: 'egg hunt with yoshi', content: 'blah blah blah'}\n    ]\n}\n\nconst projectReducer = (state = initState, action) => {\n    switch(action.type){\n        case 'CREATE_PROJECT':\n            console.log(action.project)\n            return state;\n        case 'CREATE_PROJECT_ERROR':\n            console.log(`Create project error: ${action.err}`)\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default projectReducer;","import authReducer from './authReducer';\nimport projectReducer from './projectReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    project: projectReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n})\n\nexport default rootReducer;","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBmPEoLrcYxnrjMda6cGP_kK1hsFfk73pQ\",\n    authDomain: \"marioplan-dd8b7.firebaseapp.com\",\n    databaseURL: \"https://marioplan-dd8b7.firebaseio.com\",\n    projectId: \"marioplan-dd8b7\",\n    storageBucket: \"marioplan-dd8b7.appspot.com\",\n    messagingSenderId: \"28148187580\",\n    appId: \"1:28148187580:web:a2eed6a29d6c16022cebb9\",\n    measurementId: \"G-ETC2V2NPJT\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n//firebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\nimport { getFirestore, reduxFirestore, createFirestoreInstance } from 'redux-firestore';\nimport { getFirebase, ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\nimport firebase from 'firebase/app'\n\nconst middleware = thunk.withExtraArgument({ getFirebase, getFirestore });\n\nconst store = createStore(\n  rootReducer,\n  compose(applyMiddleware(middleware), reduxFirestore(fbConfig))\n)\n\nconst rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n}\n\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance, // <- needed if using firestore\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}